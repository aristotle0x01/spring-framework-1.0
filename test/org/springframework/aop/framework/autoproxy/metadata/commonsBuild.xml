<!--$Id: commonsBuild.xml,v 1.2 2004/02/23 10:45:26 jhoeller Exp $-->


<!--
	Commons Attributes build script.
	
	Commons Attributes basics (you won't find these in their docs as of December 03 :-)
	
	- compile the attributes with the attribute-compiler task to a temporary directory
	- Commons Attributes places additional Java files there
	- compile the original source AND these additional Java files to the destination directory.
	If there are syntax errors, or you reference non-existent attribute classes,
	you'll see compilation errors from the normal Javac task.
	- if weird things are happening, look at the generated Java source files.
	- Commons Attributes uses constructors to create attributes
	- The parser is currently very fussy about whitespace. Foo( "bar" ) = misery; Foo("bar") happiness.
	- generated classes import the same classes as the original classes. Of course you'll
	probably get warnings from you IDE if you import purely for attributes,
	but you can use this mechanism to avoid the use of FQNs, and to use constants in arguments.
	- unlike some other attributes APIs, Commons Attributes won't add Attribute onto 
	the end of your class names.
-->

<project name="spring-metadata" default="test" basedir=".">  
  
  <!-- 
  	Location of various directories.
  	This build script relies on knowledge of where the master Spring
  	build script compiles classes.
  	-->
  <property name="examples" value="."/>  
  
  <!--  -->
  <property name="spring.root" value="../../../../../../.." />
  
  <property name="spring.classpath" value="${spring.root}/target/classes"/>
  
  <property name="spring.testclasspath" value="${spring.root}/target/test-classes"/>
  
  <property name="spring.test" value="${spring.root}/test"/>
  
  <property name="spring.lib" value="${spring.root}/lib"/>
  
    <property name="build" value="${spring.root}/target/metadata-tests"/>
    
    <property name="generated.source.dir" value="${spring.root}/target/generated-commons-attributes-src"/>
  
  <path id="master-classpath">
		<fileset dir="${spring.lib}">
			<include name="**/*.jar"/>
		</fileset>

	</path>
  
  
  <!-- Bring in Jakarta Commons attribute compilation -->
  <taskdef resource="org/apache/commons/attributes/anttasks.properties"/>
 

  <!-- Prepare target directories -->
  <target name="prepare" >
    <mkdir dir="${build}"/>
    <mkdir dir="$generated.source.dir}"/>
  </target>

  <!-- Remove all the directories created in the prepare target -->
  <target name="clean">
    <delete dir="${build}"/>
  </target>


	<!--
		Compile attributes with Commons Attribtes.
		Note that this step should occur before normal Java compilation,
		and the Java compile task should depend on it.
	-->
 <target name="compileAttributes" depends="prepare" >
 	<!-- Compile to a temp directory -->
 	 <attribute-compiler 
 	 	destdir="${generated.source.dir}" 
 	 >
 	 	<!-- Fileset must point to root of current source tree -->
         <fileset dir="${spring.test}" includes="**/autoproxy/metadata/*.java"/>
     </attribute-compiler>
 </target>

  <!-- Build the test code -->
  <target name="compile" depends="compileAttributes" >
    <javac 
	   		destdir="${build}" 
	   	>
	   		
	   		<!-- We must compile both our original source and the generated attributes classes -->
	   		<src path="${examples}"/>
    		<src path="${generated.source.dir}"/>
	   		
	   		 <classpath>
	   		 	<pathelement path="${spring.testclasspath}"/>
	   		 	<pathelement path="${spring.classpath}"/>
	   		 </classpath>
	   		 <classpath refid="master-classpath"/>
    </javac>    
    
    <!-- Copy XML files across to build dir -->
    <copy 
    	todir="${build}">
    	<fileset dir="${spring.test}" includes="**/autoproxy/metadata/*.xml"/>
  </copy>
  </target>

  
  <!-- run the example -->
  <target name="test" depends="compile" >
    <junit printsummary="yes" fork="yes" haltonfailure="no">
    	<classpath>
    		<pathelement location="${build}"/>
		    <pathelement location="${spring.classpath}"/>
		    <pathelement path="${spring.testclasspath}"/>
  		</classpath>
  		<classpath  refid="master-classpath"/>
    	
  	<formatter type="plain" usefile="false"/>
  	<test name="org.springframework.aop.framework.autoproxy.metadata.CommonsAttributesMetadataAutoProxyTests"/>
	</junit>

  </target>  
  
</project>
