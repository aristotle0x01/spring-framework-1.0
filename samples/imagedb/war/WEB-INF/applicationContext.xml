<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Middle tier application context definition for the image database.
	-->
<beans>

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>WEB-INF/jdbc.properties</value>
				<value>WEB-INF/mail.properties</value>
			</list>
		</property>
	</bean>

	<!-- Local DataSource that works in any environment -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName"><value>${jdbc.driverClassName}</value></property>
		<property name="url"><value>${jdbc.url}</value></property>
		<property name="username"><value>${jdbc.username}</value></property>
		<property name="password"><value>${jdbc.password}</value></property>
	</bean>

	<!-- Transaction manager for a single JDBC DataSource -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource"><ref local="dataSource"/></property>
	</bean>

	<!-- NativeJdbcExtractor for the Commons DBCP connection pool above -->
	<!-- (just needed for oracleLobHandler) -->
	<bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor"
			lazy-init="true"/>

	<!-- LobHandler for Oracle JDBC drivers -->
	<!-- (refers to the NativeJdbcExtractor above to get access to native OracleConnections) -->
	<bean id="oracleLobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler"
			lazy-init="true">
		<property name="nativeJdbcExtractor"><ref local="nativeJdbcExtractor"/></property>
	</bean>

	<!-- LobHandler for well-behaved JDBC drivers -->
	<!-- (simply delegating to corresponding PreparedStatement and ResultSet methods) -->
	<bean id="defaultLobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"
			lazy-init="true"/>

	<!-- Default implementation of the ImageDatabase business interface -->
	<!-- (refers to a LobHandler for handling BLOBs and CLOBs -->
	<bean id="imageDatabaseTarget" class="org.springframework.samples.imagedb.DefaultImageDatabase">
		<property name="dataSource"><ref local="dataSource"/></property>
		<property name="lobHandler"><ref bean="${imageDatabase.lobHandler}"/></property>
	</bean>

	<!-- Transactional proxy for the business object above -->
	<bean id="imageDatabase" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager"><ref local="transactionManager"/></property>
		<property name="target"><ref local="imageDatabaseTarget"/></property>
		<property name="transactionAttributes">
			<props>
				<prop key="getImages">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="streamImage">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="storeImage">PROPAGATION_REQUIRED</prop>
				<prop key="clearDatabase">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<!-- MailSender implementation for JavaMail -->
	<!-- Used by ListImagesQuartzJob and ListImagesTimerTask; see "scheduling-*.xml" -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host"><value>${mail.host}</value></property>
	</bean>

</beans>
