<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC '-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN' 'http://java.sun.com/dtd/web-app_2_3.dtd'>

<!--
  - Web app deployment descriptor that loads both a root application context
  - and an "example" DispatcherServlet with a specific context.
  -
  - Any number of additional DispatcherServlets can be added.
  -
  - Depends on the following libraries in WEB-INF/lib:
  - * spring.jar
  - * commons-logging.jar
  - * log4j-1.2.x.jar
  -->

<web-app>

	<!--
	  - Key of the system property that should specify the root directory of this
	  - web app. Applied by WebAppRootListener or Log4jConfigListener.
	  -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>example.root</param-value>
	</context-param>

	<!--
	  - Location of the Log4J config file, for initialization and refresh checks.
	  - Applied by Log4jConfigListener.
	  -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/classes/log4j.properties</param-value>
	</context-param>

	<!--
	  - Location of the XML file that defines the root application context
	  - Applied by ContextLoaderListener.
	  -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext-jdbc.xml</param-value>
		<!--
		<param-value>/WEB-INF/applicationContext-hibernate.xml</param-value>
		-->
		<!--
		<param-value>/WEB-INF/applicationContext-aop.xml</param-value>
		-->
	</context-param>

	<!--
	  - Configures Log4J for this web app.
	  - As this context specifies a context-param "log4jConfigLocation", its file path
	  - is used to load the Log4J configuration, including periodic refresh checks.
	  -
	  - Would fall back to default Log4J initialization (non-refreshing) if no special
	  - context-params are given.
	  -
	  - Exports a "web app root key", i.e. a system property that specifies the root
	  - directory of this web app, for usage in log file paths.
	  - This web app specifies "example.root" (see log4j.properties file).
	  -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

	<!--
	  - Loads the root application context of this web app at startup,
	  - by default from "/WEB-INF/applicationContext.xml".
	  - Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
	  - to access it anywhere in the web application, outside of the framework.
	  -
	  - The root context is the parent of all servlet-specific contexts.
	  - This means that its beans are automatically available in these child contexts,
	  - both for getBean(name) calls and (external) bean references.
    -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!--
	  - Servlet that dispatches request to registered handlers (Controller implementations).
	  - Has its own application context, by default defined in "{servlet-name}-servlet.xml",
	  - i.e. "example-servlet.xml".
	  -
	  - A web app can contain any number of such servlets.
	  - Note that this web app has a shared root application context, serving as parent
	  - of all DispatcherServlet contexts.
	  -->
  <servlet>
		<servlet-name>example</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<load-on-startup>1</load-on-startup>
  </servlet>

	<!--
	  - Maps the example dispatcher to /example/*. All handler mappings in
	  - example-servlet.xml will by default be applied to this subpath.
	  - If a mapping isn't a /* subpath, the handler mappings are considered
	  - relative to the web app root.
	  -
	  - A single dispatcher could get mapped to multiple paths, like any servlet.
	  -->
  <servlet-mapping>
    <servlet-name>example</servlet-name>
    <url-pattern>/example/*</url-pattern>
  </servlet-mapping>

	<!--
		- Standard J2EE resource reference to a JNDI DataSource.
	  - Must match the DataSource defined in the application context.
	  -->
	<resource-ref>
		<res-ref-name>jdbc/myds</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>

</web-app>
