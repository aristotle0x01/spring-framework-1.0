<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Application context definition for "example" DispatcherServlet.
  - Heavily depended on web infrastructure, naturally.
  -->

<beans>

	<!-- ========================= GENERAL DEFINITIONS ========================= -->

	<!--
	  - The message source for this servlet, loaded from localized "example-messages_xx"
	  - classpath files, i.e. "/WEB-INF/classes/example-messages.properties".
	  -
	  - "getMessage" calls to this context will use this source first, falling back to
	  - the root context's. This means that this child context inherits all messages
	  - from the parent's source, but is able to define new messages and override ones
	  - defined in the parent's source.
	  -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" >
		<property name="basename"><value>example-messages</value></property>
	</bean>

	<!--
	  - Locale resolution via cookie instead of evaluating the browser locale.
	  - Locale changes will send a new cookie to the client.
	  -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/>

	<!--
	  - Theme resolution via cookie instead of the fixed one named "theme".
	  - Theme changes will send a new cookie to the client.
	  -->
	<bean id="themeResolver" class="org.springframework.web.servlet.theme.CookieThemeResolver"/>


	<!-- ========================= MAPPING DEFINITIONS ========================= -->

	<!--
	 - Explicit URL handler mapping instead of default BeanNameUrlHandlerMapping.
	 -->
	<bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="urlMap">
			<map>
				<entry key="/mytest"><ref local="exampleController"/></entry>
				<entry key="/myform"><ref local="exampleFormController"/></entry>
				<entry key="/mymulti/*"><ref local="exampleMultiController"/></entry>
			</map>
		</property>
	</bean>

	<!--
	  - Explicit view mappings in bundle instead of default InternalResourceViewResolver.
	  - Fetches the view mappings from localized "views_xx" classpath files, i.e.
	  - "/WEB-INF/classes/views.properties" or "/WEB-INF/classes/views_de.properties".
	  -
	  - Symbolic view names returned by controllers will be resolved in the respective
	  - properties file, allowing for arbitrary mappings between names and resources.
	  -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
		<property name="basename"><value>views</value></property>
	</bean>

	<!--
	  - Alternative view resolver, fetching the view mappings from an XML bean
	  - definition file (with <bean ...> syntax) instead of a properties file.
	  - Does not support localized view resolution.
	  -->
	<!--
	<bean id="viewResolver" class="org.springframework.web.servlet.view.XmlViewResolver">
		<property name="location"><value>/WEB-INF/views.xml</value></property>
	</bean>
	-->


	<!-- ========================= CONTROLLER DEFINITIONS ========================= -->

	<!--
	  - Simple Controller implementation, available at /example/mytest
	  - (according to the URL handler mapping definition above).
	  - Uses the ExampleBusinessObject defined in the root application context.
	  -->
	<bean id="exampleController" class="example.ExampleController">
		<property name="businessObject"><ref bean="exampleBusinessObject"/></property>
	</bean>

	<!--
	  - Validator for ExampleFormBean, implementing Spring's Validator interface.
	  - Could also be defined in the root application context, if generic enough.
	  -->
	<bean id="exampleValidator" class="example.ExampleFormBeanValidator"/>

	<!--
	  - SimpleFormController definition, available at /example/myform
	  - (according to the URL handler mapping definition above).
	  - Uses the ExampleFormBeanValidator defined above.
	  -->
	<bean id="exampleFormController" class="org.springframework.web.servlet.mvc.FormControllerTestSuite">
		<property name="beanName"><value>exampleFormBean</value></property>
		<property name="commandClass"><value>example.ExampleFormBean</value></property>
		<property name="validator"><ref local="exampleValidator"/></property>
		<property name="formView"><value>example1</value></property>
		<property name="successView"><value>example2</value></property>
	</bean>

	<!--
	  - Method name resolver definition for MultiActionControllers,
	  - mapping URLs to respective methods of the controller class.
	  -->
	<bean id="exampleMultiMethodNameResolver" class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
		<property name="mappings">
			<props>
				<prop key="/mymulti/mycommand1">exampleHandlerMethod</prop>
				<prop key="/mymulti/mycommand2">anotherExampleHandlerMethod</prop>
      </props>
		</property>
	</bean>

	<!--
	  - MultiActionController implementation, available at /example/mymulti/*
	  - (according to the URL handler mapping definition above).
	  - Uses the MethodNameResolver definition defined above.
	  -->
	<bean id="exampleMultiController" class="werk3.example.ExampleMultiController">
		<property name="methodNameResolver"><ref local="exampleMultiMethodNameResolver"/></property>
	</bean>

</beans>
