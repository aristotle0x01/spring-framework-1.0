<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>

	<display-name>Spring JPetStore</display-name>

	<description>Spring JPetStore sample application</description>
	
	<!--
	  - Location of the XML file that defines the root application context
	  - Applied by ContextLoaderListener.
		-
		- Can include "/WEB-INF/dataAccessContext-local.xml" for a single-database
		- context, or "/WEB-INF/dataAccessContext-jta.xml" for a two-database context.
		- Here, we want the generic declarativeServices.xml file too, defining
		- transaction autoproxying as alternative to TransactionProxyFactoryBean.
	  -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/dataAccessContext-local.xml  /WEB-INF/declarativeServices.xml  /WEB-INF/applicationContext.xml
		</param-value>
		<!--
		<param-value>
			/WEB-INF/dataAccessContext-jta.xml  /WEB-INF/declarativeServices.xml  /WEB-INF/applicationContext.xml
		</param-value>
		-->
	</context-param>

	<!--
	  - Loads the root application context of this web app at startup,
	  - by default from "/WEB-INF/applicationContext.xml".
		- Note that it is preferable to use ContextLoaderListener in a servlet container
		- that follows the Servlet 2.4 initialization order (most Servlet 2.3 containers do).
		-
	  - Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
	  - to access it anywhere in the web application, outside of the framework.
	  -
	  - The root context is the parent of all servlet-specific contexts.
	  - This means that its beans are automatically available in these child contexts,
	  - both for getBean(name) calls and (external) bean references.
    -->
	<servlet>
		<servlet-name>context</servlet-name>
		<servlet-class>org.springframework.web.context.ContextLoaderServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!--
	  - Spring web MVC servlet that dispatches request to registered handlers.
	  - Has its own application context, by default defined in "{servlet-name}-servlet.xml",
	  - i.e. "petstore-servlet.xml" in this case.
	  -
	  - A web app can contain any number of such servlets.
	  - Note that this web app has a shared root application context, serving as parent
	  - of all DispatcherServlet contexts.
	  -->
	<servlet>
		<servlet-name>petstore</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<!--
	  - Struts servlet that dispatches to registered actions.
		- Reads its configuration from "struts-config.xml".
		-
		- A web app can just contain one such servlet.
		- If you need multiple namespaces, use Struts' module mechanism.
    -->
	<servlet>
		<servlet-name>action</servlet-name>
		<servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
		<load-on-startup>3</load-on-startup>
	</servlet>

	<!--
		- Dispatcher servlet definition for HTTP remoting via the Caucho protocols,
		- i.e. Hessian and Burlap (see caucho-servlet.xml for the controllers).
		-->
	<servlet>
		<servlet-name>caucho</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>4</load-on-startup>
	</servlet>

	<!--
		- Servlet definition for Web Service remoting via Apache Axis
		- (see server-config.wsdd for Axis configuration).
		-->
	<servlet>
		<servlet-name>axis</servlet-name>
		<servlet-class>org.apache.axis.transport.http.AxisServlet</servlet-class>
		<load-on-startup>5</load-on-startup>
	</servlet>

	<!--
		- Dispatcher servlet mapping for the main web user interface.
		- Either refering to "petstore" for the Spring web MVC dispatcher,
		- or to "action" for the Struts dispatcher.
		-
		- Simply comment out the "petstore" reference in favour of "action"
		- to switch from the Spring web tier to the Struts web tier.
		-->
	<servlet-mapping>
		<servlet-name>petstore</servlet-name>
		<!--
		<servlet-name>action</servlet-name>
		-->
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<!--
		- Dispatcher servlet mapping for HTTP remoting via the Caucho protocols,
		- i.e. Hessian and Burlap (see caucho-servlet.xml for the controllers).
		-->
	<servlet-mapping>
		<servlet-name>caucho</servlet-name>
		<url-pattern>/caucho/*</url-pattern>
	</servlet-mapping>

	<!--
		- Servlet mapping for Web Service remoting via Apache Axis
		- (see server-config.wsdd for Axis configuration).
		-->
	<servlet-mapping>
		<servlet-name>axis</servlet-name>
		<url-pattern>/axis/*</url-pattern>
	</servlet-mapping>

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

	<!--
	  - Reference to main database.
		- Only needed for JTA (dataAccessContext-jta.xml).
		-->
	<!--
	<resource-ref>
		<res-ref-name>jdbc/jpetstore</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>
	-->

	<!--
	  - Reference to order database.
		- Only needed for JTA (dataAccessContext-jta.xml).
		-->
	<!--
	<resource-ref>
		<res-ref-name>jdbc/jpetstore-order</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>
	-->

</web-app>
